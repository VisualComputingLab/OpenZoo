Server setup

For achieving a stream processing task, you need to define a topology (OZTopology).
The topology is a set of interconnected components (OZServices), which are running on a cluster (OZCluster), consisting of servers (OZServer).
The creation, update, initiation and monitoring of topologies is done over a graphical user interface (OpenZUI).

A. General requirements for various framework components

i) OpenZUI
The OZUI is a Tomcat application and uses RedisIO to store and exchange parameters with the OZServices.

ii) OZServer
An OZServer is the building unit of an OZCluster. It is an ordinary server with a fixed (static) IP address, running either Linux or Windows and Apache Tomcat.

iii) OZTopology
An OZTopology is a graph-like structure with OZServices as nodes and RabbitMQ queues as connections. The processing results of the topology are usually saved in a database, in our case MongoDB. You can use one RabbitMQ/MongoDB server per topology, or use one for all your topologies.

B. Step by step instructions for installation/configuration

i) OZServer OS
OpenZoo has been tested on 64bit Ubuntu 14.04 LTS Server and Windows XP/7/10. All instructions in the following describe the case of Ubuntu 14.04 LTS.
The disc space, CPU power and memory consumption depends on the application, but it should have at least 2 GB of RAM and 10 GB of free disc space.
Be sure to install the latest OS updates:
	> sudo apt-get update
	> sudo apt-get dist-upgrade


ii) Static IP
An OZServer installed e.g. on a VirtualBox in some corporate network can be configured to use a static IP (as long as the network supports it), as follows (example IP: 111.111.111.11):
	> sudo nano /etc/network/interfaces
		auto eth0
		iface eth0 inet static
		address 111.111.111.11
		netmask 255.255.255.0
		network 111.111.111.0
		gateway 111.111.111.1
		broadcast 111.111.111.255
		dns-nameservers 111.111.111.1
	> sudo /etc/init.d/networking restart

Ask your administrator for the appropriate values.

iii) Apache Tomcat 7, Java 7

Install
	> sudo apt-get install tomcat7
	> sudo apt-get install default-jdk
	> sudo nano /etc/environment
		JAVA_HOME=/usr/lib/jvm/default-java
		CATALINA_HOME=/var/lib/tomcat7
	#reconnect
	> sudo nano /var/lib/tomcat7/conf/tomcat-users.xml
		<role rolename="manager-gui"/>
		<role rolename="manager-script"/>
		<user username="admin" password="OZ_SERVER_PASSWORD" roles="manager-gui,manager-script"/>
Set parameters
	Copy setenv.sh (origin) to /usr/share/tomcat7/bin/
	Set JAVA_HOME
	Set appropriate limits for –Xms, Xmx, MaxPermSize if neccessary.
Restart tomcat
	> sudo service tomcat7 restart
Install management application
	> sudo apt-get install tomcat7-admin


iv) RedisIO
Install
	> sudo nano /etc/apt/sources.list.d/dotdeb.org.list
		deb http://packages.dotdeb.org squeeze all
		deb-src http://packages.dotdeb.org squeeze all
	> wget -q -O - http://www.dotdeb.org/dotdeb.gpg | sudo apt-key add -
	> sudo apt-get update
	> sudo apt-get install redis-server
	> sudo nano /etc/redis/redis.conf
		bind 111.111.111.11 127.0.0.1 # replace with the IP of the server hosting redis
	> sudo service redis-server restart


v) RabbitMQ
You can use one RabbitMQ server per topology, or use one for all your topologies.
We will also create user qadmin with password qpwd.

Install RabbitMQ
	> sudo nano /etc/apt/sources.list
		deb http://www.rabbitmq.com/debian/ testing main
	> wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
	> sudo apt-key add rabbitmq-signing-key-public.asc
	> sudo apt-get update
	> sudo apt-get install rabbitmq-server
	> sudo /usr/lib/rabbitmq/bin/rabbitmq-plugins enable rabbitmq_management

Create user and delete default user
	> sudo rabbitmqctl add_user qadmin qpwd
	> sudo rabbitmqctl set_user_tags qadmin administrator
	> sudo rabbitmqctl set_permissions qadmin ".*" ".*" ".*"
	> sudo rabbitmqctl delete_user guest
	> sudo service rabbitmq-server restart
 


vi) MongoDB 3.0
You can use one MongoDB server per topology, or use one for all your topologies.
We will also create user dbadmin with password dbpwd and database topodb.

Install Mongo
	> sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
	> echo "deb http://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb.list
	> sudo apt-get update
	> sudo apt-get install mongodb-org=3.0.0 mongodb-org-server=3.0.0 mongodb-org-shell=3.0.0 mongodb-org-mongos=3.0.0 mongodb-org-tools=3.0.0
	> echo "mongodb-org hold" | sudo dpkg --set-selections
	> echo "mongodb-org-server hold" | sudo dpkg --set-selections
	> echo "mongodb-org-shell hold" | sudo dpkg --set-selections
	> echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
	> echo "mongodb-org-tools hold" | sudo dpkg --set-selections
	> sudo service mongod start

Disable interface binding
	> sudo nano /etc/mongod.conf
		# bind_ip = 127.0.0.1

Enable authentication
	> mongo
		> use admin
		> db.createUser(
		{
		user: "dbadmin",
		pwd: "dbpwd",
		roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
		}
		)

	> sudo nano /etc/mongod.conf
		#noauth = true

	> sudo service mongod restart

Check authentication
	> mongo topodb –u dbadmin –p dbpwd

If no login possible:
	> sudo nano /etc/mongod.conf
		noauth = true

	> sudo service mongod restart

	> mongo
		> var schema = db.system.version.findOne({"_id" : "authSchema"})
		> schema.currentVersion = 3
		> db.system.version.save(schema)

	Recreate user
		> use topodb
		> db.createUser(
		{
		user: "dbadmin",
		pwd: "dbpwd",
		roles: [
		{role: "readWrite", db: "topodb"}
		]
		}
		)

	> sudo nano /etc/mongod.conf
		#noauth = true

	> sudo service mongod restart

Check authentication again
	> mongo topodb –u dbadmin –p dbpwd

Install something like robomongo (http://robomongo.org/) for managing the database, if needed.

